#zadaca 3 so 3 preku reka
#1-boat on the left river bank, 0-boat on the right river bank
from collections import deque
def is_valid(state):
    missionaries_left, cannibals_left, boat_position = state
    missionaries_right = 3 - missionaries_left
    cannibals_right = 3 - cannibals_left

    if(missionaries_left>0 and missionaries_left<cannibals_left) or (missionaries_right>0 and missionaries_right<cannibals_right):
        return False
    return True

def expand_state(state):
    missionaries_left, cannibals_left, boat_position = state
    possible_moves = []
    for move in [(1,0), (2,0), (0,1), (0,2), (0,0)]:
        new_m_left = missionaries_left - move[0] if boat_position == 1 else missionaries_left + move[0]
        new_c_left = cannibals_left - move[1] if boat_position == 1 else cannibals_left + move[1]
        new_b_position = 1 - boat_position

        new_state = (new_m_left, new_c_left, new_b_position)
        if 0<=new_m_left<=3 and 0<=new_c_left<=3 and is_valid(new_state):
            possible_moves.append(new_state)
    return possible_moves

initial_state = (3, 3, 1)
goal_state = (0, 0, 0)

def bfs(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set()
    visited.add(initial_state)
    while queue:
        state, path = queue.popleft()
        if state == goal_state:
            return path + [state]
        for new_state in expand_state(state):
            if new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, path +[state]))
    return None

def print_solution(path):
    if path:
        print("Solution path:")
        for step in path:
            print(step)
    else:
        print("No solution found")

# Run BFS to solve the problem
solution = bfs(initial_state, goal_state)
print_solution(solution)
